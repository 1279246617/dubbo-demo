<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
       http://www.springframework.org/schema/task
	   http://www.springframework.org/schema/task/spring-task-4.0.xsd">
	   
	<context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"/>
		
	<!-- task任务扫描注解 -->
	<task:annotation-driven/> 
		
	<!-- 扫描类包，将标注Spring注解的类自动转化Bean，同时完成Bean的注入 -->
	<context:component-scan base-package="com.coe.wms.*" />
    
	<!-- 配置业务库数据源 -->
	<bean id="dataSourceWms" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName" value="${jdbc.wms.driverClassName}" />
	    <property name="url" value="${jdbc.wms.url}" />
	    <property name="username" value="${jdbc.wms.username}" />
	    <property name="password" value="${jdbc.wms.password}" />
	    <!-- 配置初始化大小、最小、最大 -->
	    <property name="initialSize" value="10" />
	    <property name="minIdle" value="10" /> 
	    <property name="maxActive" value="500" />
	    <!-- 配置获取连接等待超时的时间 20秒-->
	    <property name="maxWait" value="20000" />
	     <property name="useUnfairLock" value="false" />
	    <property name="poolPreparedStatements" value="false" />
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 1分钟-->
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 5分钟-->
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	</bean>
	<bean id="dataSourceTrack" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		 <!-- 基本属性 url、user、password -->
		 <property name="driverClassName" value="${jdbc.track.driverClassName}" />	
	    <property name="url" value="${jdbc.track.url}" />
	    <property name="username" value="${jdbc.track.username}" />
	    <property name="password" value="${jdbc.track.password}" />
	    <property name="initialSize" value="10" />
	    <property name="minIdle" value="10" /> 
	    <property name="maxActive" value="500" />
	    <property name="maxWait" value="20000" />
	   	<property name="useUnfairLock" value="false" />
	    <property name="poolPreparedStatements" value="false" />
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	</bean>

	<!-- 配置Jdbc模板 -->
	<bean id="namedParameterJdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg ref="dynamicDataSource" />
	</bean>
		
	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dynamicDataSource" />
	</bean>

	<bean id="dynamicDataSource" class="com.coe.wms.dao.datasource.DynamicDataSource">
		<!-- 通过key-value的形式来关联数据源 -->
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="dataSourceWms" value-ref="dataSourceWms"></entry>
				<!-- 哲盟系统数据库 -->
				<entry key="dataSourceTrack" value-ref="dataSourceTrack"></entry>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="dataSourceWms">
		</property>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dynamicDataSource" />

	<!-- 配置事务管理，让service-impl包下所有Bean的所有方法拥有事务 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="serviceMethod"
			expression=" execution(* com.coe.wms.service.*.*(..))" />
		<aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
	</aop:config>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 保存,更新,删除方法 -->
			<!-- 事务隔离:丢失更新 ,脏读,幻读,不可重复读 READ_COMMITTED:只能保障无脏读, 查询时加共享锁,查询结束即放开共享锁,提交时加排他锁 -->
			<!-- 尽量读操作在方法开始, 写操作在方法结尾 ,因为写操作会加排他锁 -->
			<!-- propagation事务传播 isolation事务隔离 -->
			<tx:method name="save*" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="com.coe.wms.exception.ServiceException"/>
			<tx:method name="update*" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="com.coe.wms.exception.ServiceException"/>
			<tx:method name="delete*" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="com.coe.wms.exception.ServiceException"/>
			<tx:method name="*save*" propagation="REQUIRED" isolation="READ_COMMITTED" rollback-for="com.coe.wms.exception.ServiceException"/>
				
			<!-- 查询方法 提示数据库驱动程序和数据库系统，这个事务并不包含更改数据的操作 -->
			<tx:method name="get*" read-only="true" isolation="READ_UNCOMMITTED"/>
			<tx:method name="find*" read-only="true" isolation="READ_UNCOMMITTED" />
			<!--其他方法 -->
			<tx:method name="*"  isolation="READ_UNCOMMITTED" rollback-for="com.coe.wms.exception.ServiceException"/>
		</tx:attributes>
	</tx:advice>

	<!-- 启用缓存注解 -->
	<import resource="simplesm-context.xml" />
	<aop:aspectj-autoproxy />
	<bean name="defaultMemcachedClient" class="com.google.code.ssm.CacheFactory">
		<property name="cacheClientFactory">
			<bean
				class="com.google.code.ssm.providers.xmemcached.MemcacheClientFactoryImpl" />
		</property>
		<property name="addressProvider">
			<bean class="com.google.code.ssm.config.DefaultAddressProvider">
				<property name="address" value="127.0.0.1:11211" />
			</bean>
		</property>
		<property name="configuration">
			<bean class="com.google.code.ssm.providers.CacheConfiguration">
				<property name="consistentHashing" value="true" />
			</bean>
		</property>
	</bean>
	
		<!-- 引入系统自定义config  -->
	<import resource="config-context.xml" />
</beans>