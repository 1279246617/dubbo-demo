<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-4.2.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
       http://www.springframework.org/schema/task
	   http://www.springframework.org/schema/task/spring-task-4.2.xsd">

	<!-- 抽象数据源配置 可继承 -->
	<bean id="abstractDataSource" abstract="true" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.wms.driverClassName}" />
		
		<!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降 -->
		<property name="maxWait" value="60000" />
		
		<!-- 使用非公平锁 -->
		<property name="useUnfairLock" value="true" />
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
				
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。 -->
		<property name="validationQuery" value="SELECT 'x'" />
		
		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效 -->
		<property name="testWhileIdle" value="true" />
		
		<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
		<property name="testOnBorrow" value="false" />
		
		<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<property name="testOnReturn" value="false" />
		
		
		<property name="filters" value="config" />
	</bean>

	<!-- 主库 -->
	<bean id="dataSourceMaster" parent="abstractDataSource">
		<property name="driverClassName" value="${jdbc.wms.driverClassName}" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.wms.write.url}" />
		<property name="username" value="${jdbc.wms.write.username}" />
		<property name="password" value="${jdbc.wms.write.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.wms.write.initPoolSize}" />
		<property name="minIdle" value="${jdbc.wms.write.minPoolSize}" />
		<property name="maxActive" value="${jdbc.wms.write.maxPoolSize}" />
	</bean>

	<!-- 从库1 -->
	<bean id="dataSourceSlave1" parent="abstractDataSource">
		<property name="driverClassName" value="${jdbc.wms.driverClassName}" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.wms.read.1.url}" />
		<property name="username" value="${jdbc.wms.read.1.username}" />
		<property name="password" value="${jdbc.wms.read.1.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.wms.read.1.initPoolSize}" />
		<property name="minIdle" value="${jdbc.wms.read.1.minPoolSize}" />
		<property name="maxActive" value="${jdbc.wms.read.1.maxPoolSize}" />
	</bean>

	<!-- 从库2 -->
	<bean id="dataSourceSlave2" parent="abstractDataSource">
		<property name="driverClassName" value="${jdbc.wms.driverClassName}" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.wms.read.2.url}" />
		<property name="username" value="${jdbc.wms.read.2.username}" />
		<property name="password" value="${jdbc.wms.read.2.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.wms.read.2.initPoolSize}" />
		<property name="minIdle" value="${jdbc.wms.read.2.minPoolSize}" />
		<property name="maxActive" value="${jdbc.wms.read.2.maxPoolSize}" />
	</bean>

	<!-- 数据源代理 -->
	<bean id="dataSource" class="com.coe.wms.common.core.db.DynamicDataSource">
		<property name="dataSourceMaster" ref="dataSourceMaster" />
		<property name="dataSourceSlaves">
			<list>
				<ref bean="dataSourceSlave1" />
				<ref bean="dataSourceSlave2" />
			</list>
		</property>
	</bean>
	
	<!--开启事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager" order="2"/>
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 定义事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager"> 
		<tx:attributes>
			<!--propagation:事务传播- REQUIRED: 如果存在一个事务，则支持当前事务。如果没有事务则开启 -->
			<!--isolation:事务隔离- READ_COMMITTED:无脏读,只读取已经提交的数据 only read committed -->

			<!-- 必须事务 -->
			<tx:method name="add*" propagation="REQUIRED" isolation="READ_COMMITTED"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="save*" propagation="REQUIRED" isolation="READ_COMMITTED"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="update*" propagation="REQUIRED" isolation="READ_COMMITTED"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="delete*" propagation="REQUIRED" isolation="READ_COMMITTED"
				rollback-for="java.lang.RuntimeException" />

			<!-- 可有可无事务 -->
			<tx:method name="get*" propagation="SUPPORTS" isolation="READ_COMMITTED"
				read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" isolation="READ_COMMITTED"
				read-only="true" />
			<tx:method name="query*" propagation="SUPPORTS" isolation="READ_COMMITTED"
				read-only="true" />
			<tx:method name="count*" propagation="SUPPORTS" isolation="READ_COMMITTED"
				read-only="true" />

			<!--其他方法 -->
			<tx:method name="*" propagation="REQUIRED" isolation="READ_COMMITTED"
				rollback-for="java.lang.RuntimeException" />
		</tx:attributes>
	</tx:advice>
	
	<!-- 定义AOP配置 -->
	<aop:config proxy-target-class="true">
		<!-- 定义一个切入点 -->
		<!-- * com.coe.wms.facade..*(..)) [*表示所有返回类型, ..表示facade下的所有子包 ,*表示所有类 ,表示所有方法 (..)表示所有参数 -->
		<aop:pointcut id="serviceMethod" expression="execution(* com.coe.wms.facade..*(..))"/>
		<!-- 对切入点和事务的通知，进行适配 -->
		<aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
	</aop:config>

	<!-- SqlSessionTemplate：MyBatis提供的持久层访问模板化的工具，线程安全，可通过构造参数或依赖注入SqlSessionFactory实例 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>

	<!-- SqlSessionFactory：创建SqlSession实例的工厂 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:mybatis/mapper/**/*.xml" />
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
	</bean>

	<!-- 通过扫描的模式，扫描目录下所有的mapper， 根据对应的mapper.xml为其生成代理类 -->
	<bean id="mapper" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.coe.wms.service.clearing.mapper" />
		<!-- <property name="sqlSessionTemplate" ref="sqlSessionTemplate"></property> -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

</beans>